// Prisma Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String
  role       Role      @default(USER)
  vehicles   Vehicle[] // Relation to vehicles listed by user
  services   Service[] // Relation to services listed by user
  bookings   Booking[] // Relation to bookings made by the user
  reviews    Review[]  // Relation to reviews made by the user
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Vehicle {
  id          String   @id @default(uuid())
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String
  make        String
  model       String
  year        Int
  pricePerDay Float
  isAvailable Boolean  @default(true)
  description String?
  images      String[] // Array to store URLs of vehicle images
  bookings    Booking[] // Relation to bookings for this vehicle
  reviews     Review[]  // Reviews for this vehicle
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Service {
  id          String   @id @default(uuid())
  provider    User     @relation(fields: [providerId], references: [id])
  providerId  String
  type        ServiceType
  description String
  price       Float
  isAvailable Boolean  @default(true)
  bookings    Booking[] // Relation to bookings for this service
  reviews     Review[]  // Reviews for this service
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Booking {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  vehicle     Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId   String?
  service     Service? @relation(fields: [serviceId], references: [id])
  serviceId   String?
  status      BookingStatus @default(PENDING)
  totalPrice  Float
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  vehicle     Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId   String?
  service     Service? @relation(fields: [serviceId], references: [id])
  serviceId   String?
  rating      Int
  comment     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum ServiceType {
  CAR_WASH
  MECHANIC
  RIDE_SHARE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}